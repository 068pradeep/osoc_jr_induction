Git add : Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.
Git branch : This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.
Git checkout :In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, itâ€™s a way to work on a particular line of development.
Git clean : Removes untracked files from the working directory. This is the logical counterpart to git reset, which (typically) only operates on tracked files.
Git commit :Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.
Git commit --amend : Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message.
Git fetch : Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.
Git log   : Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.
